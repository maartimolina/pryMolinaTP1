<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>